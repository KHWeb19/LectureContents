public class WhatIsAbstraction {
    // order(면발 굵기, 면의 길이, 물의 온도, 끓이는 시간,
    //      차가운 물을 뿌려야 하는 타이밍, 차가운 물을 뿌리는 시간, ....) <<<--- 처맞는 매서드 ...
    //
    // order(orderProduct[id]);  == order(메뉴아이디)
    //
    // [ 다음 ]
    //
    // 추상화 <<<--- 사용자에 대한 고려를 얼마나 했는가 ?
    //              ---> 매출(돈을 법니다)
    //                   ---> 왜 ?
    //                        ---> 사용자들을 편하게 해주니까
    //                             ---> 돈을 써서 시간을 아끼고 편하게 여러가지를 즐기겠다.
    
    /*
       추상화(개인) vs 추상화(팀)
       여기서 발생하는 문제가 또 다름
       가장 큰 원인: 각자 생각하는 바가 다르기 때문 (동상이몽)
       이런 문제를 최소화하기 위해 필요한 사항이 바로 인터페이스이다!

       팀 프로젝트를 수행함에 있어서 각자 생각한 기능이 다를 수 있고
       같은 기능이라 생각했지만 동작이 다를 수도 있다.
       결국 이러한 사항들을 모두 엔티티가 수용하게 되면
       엔티티의 오염도가 매우 높아지고 대참사가 발생하게 된다.

       이를 궁극적으로 해결해 줄 수 있는 녀석이 바로 인터페이스다.
       만약 비슷비슷한 기능인데 세부사항에 차이가 있다면
       인터페이스를 써서 엔티티의 오염도를 낮추면서 작업이 가능하다.

       대표적인 예: calculation() - 계산이라는 매서드를 만들었음
                  그런데 필요에 따라 1, 2, 3, 4, 5번을 수행할 수 있어야함
                  이런 상황을 어떻게 대처할 것인가 ?
                  calculation() 내에 공통된 부분도 있을 것이고
                  각기 다른 동작들도 존재할 수 있을 것임
                  이 각기 다른 동작들을 interface로 구현해주면
                  어떤 상황에서는 1번에 맞게,
                  또 어떤 상황에서는 2번에 맞게
                  또 다른 특정 상황에서는 3, 4, 5번에 맞게 동작하게 만들어 줄 수 있다.

       1. 현재 우리는 출력을 콘솔창으로만 하고 있음 (콘솔 출력)
       2. 이 정보를 웹으로 보낸다고 한다면 ? (웹상에 출력)
       3. 혹은 이 정보가 파일로 떨어진다고 한다면 ? (파일로 입력)
       4. 아니면 전송된 정보가 DB로 들어간다면 ? (DB로 입력)
       5. 파이썬 스레드로 전송 (뭔가 통계분석등 부가적 작업을 위해)
     */
}
